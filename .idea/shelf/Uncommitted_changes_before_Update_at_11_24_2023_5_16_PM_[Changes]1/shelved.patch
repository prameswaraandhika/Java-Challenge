Index: challenge1/src/main/java/org/example/challenge3/service/ServiceOrder.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/service/ServiceOrder.java b/challenge1/src/main/java/org/example/challenge3/service/ServiceOrder.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/service/ServiceOrder.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.OrderDetail;
-
-import java.util.List;
-import java.util.UUID;
-
-public interface ServiceOrder {
-	 void createOrder(Order order);
-
-	 void createOrderDetail(OrderDetail orderDetail);
-
-	 Double getTotalPriceOfOrder();
-
-	 Order getOrderByUserId(UUID userId);
-
-	OrderDetail getOrderDetailById(UUID orderDetailID);
-}
Index: challenge1/src/main/java/org/example/challenge2/util/Utils.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/util/Utils.java b/challenge1/src/main/java/org/example/challenge2/util/Utils.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/util/Utils.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package org.example.challenge2.util;
-
-import java.util.Scanner;
-
-public class Utils {
-    public static final String LINE_EQUALS = "================================================================";
-    public static final String LINE_DASH = "---------------------------------------------------------------+\n";
-    public static final String INPUT_ARROW = "\n=> ";
-    public static final String FORMAT_PESANAN = "%-14s %5d %15s\n";
-
-    public static Scanner scan = new Scanner(System.in);
-
-    public static boolean isExit = false;
-
-}
Index: challenge1/src/main/java/org/example/challenge3/controller/ControllerProduct.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/controller/ControllerProduct.java b/challenge1/src/main/java/org/example/challenge3/controller/ControllerProduct.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/controller/ControllerProduct.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package org.example.challenge3.controller;
-
-import org.example.challenge3.model.Product;
-import org.example.challenge3.service.ServiceProduct;
-import org.example.challenge3.service.ServiceProductImpl;
-import org.example.challenge3.view.BinarFudView;
-
-import java.util.List;
-
-public class ControllerProduct {
-
-	BinarFudView binarFudView;
-	ServiceProduct serviceProduct;
-
-	public ControllerProduct(BinarFudView binarFudView) {
-		this.binarFudView = binarFudView;
-		this.serviceProduct = new ServiceProductImpl();
-	}
-
-	public List<Product> getAllProducts(){
-		return serviceProduct.findAll();
-	}
-
-
-}
Index: challenge1/src/main/java/org/example/challenge2/Main.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/Main.java b/challenge1/src/main/java/org/example/challenge2/Main.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/Main.java	
+++ /dev/null	
@@ -1,24 +0,0 @@
-package org.example.challenge2;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.view.View;
-
-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.text.DecimalFormat;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-
-public class Main {
-//    List untuk menuMakanan
-
-
-    public static void main(String[] args) {
-        View.execute();
-    }
-
-
-}
\ No newline at end of file
Index: challenge1/src/main/java/org/example/challenge2/services/ServicePesanan.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/services/ServicePesanan.java b/challenge1/src/main/java/org/example/challenge2/services/ServicePesanan.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/services/ServicePesanan.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge2.services;
-
-import jakarta.validation.Valid;
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-
-import java.util.List;
-
-public interface ServicePesanan {
-
-    List<MenuMakanan> findAllMenus();
-
-    List<Pesanan> findAllPesanan();
-    void savePesanan(Pesanan pesanan);
-
-    void saveMenuMakanan(MenuMakanan menuMakanan);
-
-    void update(Pesanan pesanan);
-    void deleteByID(long id);
-}
Index: challenge3/src/main/java/org/example/challenge2/model/Databases.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/model/Databases.java b/challenge3/src/main/java/org/example/challenge2/model/Databases.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/model/Databases.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package org.example.challenge2.model;
-
-import jakarta.validation.Valid;
-import jakarta.validation.constraints.Min;
-import org.example.challenge2.model.Pesanan;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class Databases {
-    public static final List<MenuMakanan> menuMakanan = List.of(
-            new MenuMakanan(1,"Nasi Goreng", 15000),
-            new MenuMakanan(2,"Mie Goreng", 13000),
-            new MenuMakanan(3,"Nasi + Ayam", 18000),
-            new MenuMakanan(4,"Es Teh Manis", 3000),
-            new MenuMakanan(5,"Es Jeruk", 5000));
-
-    public static List<Pesanan> listPesanan = new ArrayList<Pesanan>();
-}
Index: challenge2/src/main/java/org/example/challenge3/controller/ControllerOrder.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/controller/ControllerOrder.java b/challenge2/src/main/java/org/example/challenge3/controller/ControllerOrder.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/controller/ControllerOrder.java	
+++ /dev/null	
@@ -1,80 +0,0 @@
-package org.example.challenge3.controller;
-
-import lombok.extern.java.Log;
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.OrderDetail;
-import org.example.challenge3.model.Product;
-import org.example.challenge3.service.ServiceOrder;
-import org.example.challenge3.service.ServiceOrderImpl;
-import org.example.challenge3.service.ServiceProduct;
-import org.example.challenge3.service.ServiceProductImpl;
-import org.example.challenge3.sql.InfoUser;
-import org.example.challenge3.view.BinarFudView;
-
-import javax.swing.*;
-import java.text.NumberFormat;
-import java.time.LocalDate;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.UUID;
-import java.util.logging.Logger;
-
-public class ControllerOrder {
-
-	BinarFudView binarFudView;
-	ServiceOrder serviceOrder;
-	List<OrderDetail> listOrderDetail;
-
-
-	public ControllerOrder(BinarFudView binarFudView) {
-		this.binarFudView = binarFudView;
-		this.serviceOrder = new ServiceOrderImpl();
-		this.listOrderDetail = new ArrayList<>();
-	}
-
-	public void order() {
-		try {
-			UUID orderId = UUID.randomUUID();
-			Order order = Order.builder().id(orderId).userId(InfoUser.USER_ID).orderTime(LocalDate.now()).destinationAdress(InfoUser.DESTINATION).isComplete(true).build();
-			serviceOrder.createOrder(order);
-
-//		set orderID of each orderDetail
-			for (OrderDetail orderDetail : listOrderDetail) {
-				orderDetail.setOrderId(orderId);
-				serviceOrder.createOrderDetail(orderDetail);
-			}
-			System.out.print("Order created Succesfully");
-		} catch (Exception e) {
-			System.out.print("Order created is not Succesfully: " + e);
-		}
-	}
-
-
-	public void addOrderDetail(Product product, int quantity) {
-		Double totalPrice = product.getPrice() * quantity;
-		listOrderDetail.add(OrderDetail.builder().id(UUID.randomUUID()).productId(product.getId()).quantity(quantity).totalPrice(totalPrice).build());
-		updateTotalPrice();
-	}
-
-	public void updateTotalPrice() {
-		if (!listOrderDetail.isEmpty()) {
-			double totalOrderPrice = listOrderDetail.stream().mapToDouble(OrderDetail::getTotalPrice).sum();
-			binarFudView.getTotalPesanan().setText("Total: " + converterCurrencyRupiah(totalOrderPrice));
-		}
-	}
-
-	public void clearOrder(){
-		binarFudView.getTableModel().setRowCount(0);
-		binarFudView.getTotalPesanan().setText("Total: " + 0);
-		listOrderDetail.clear();
-	}
-
-	public String converterCurrencyRupiah(double value) {
-		// Create a NumberFormat instance for Indonesian currency format
-		NumberFormat rupiahFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));
-
-		// Format the value as Indonesian Rupiah
-		return rupiahFormat.format(value);
-	}
-}
Index: challenge2/src/main/java/org/example/challenge1/Pesanan.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge1/Pesanan.java b/challenge2/src/main/java/org/example/challenge1/Pesanan.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge1/Pesanan.java	
+++ /dev/null	
@@ -1,5 +0,0 @@
-package org.example.challenge1;
-
-public record Pesanan(String nama, int jumlah, long harga) {
-
-}
Index: challenge1/src/main/java/org/example/challenge3/view/BinarFudView.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/view/BinarFudView.java b/challenge1/src/main/java/org/example/challenge3/view/BinarFudView.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/view/BinarFudView.java	
+++ /dev/null	
@@ -1,181 +0,0 @@
-package org.example.challenge3.view;
-
-import javax.swing.*;
-import java.awt.*;
-import javax.swing.table.DefaultTableModel;
-import java.text.NumberFormat;
-import java.util.*;
-import java.util.List;
-
-import lombok.Getter;
-import org.example.challenge3.controller.ControllerOrder;
-import org.example.challenge3.controller.ControllerProduct;
-import org.example.challenge3.model.Product;
-import org.example.challenge3.service.ServiceProduct;
-import org.example.challenge3.service.ServiceProductImpl;
-
-@Getter
-public class BinarFudView {
-	private JFrame frame;
-	private JTable table;
-	private JMenuBar menuBar;
-	private JButton bayarButton;
-	private JButton batalButton;
-	private JButton totalPesanan;
-	private DefaultTableModel tableModel;
-	private Map<JButton, Product> menuItemToProduct;
-	private ServiceProduct serviceProduct;
-	private Product clickedProduct;
-	private ControllerOrder controllerOrder;
-	private ControllerProduct controllerProduct;
-
-
-	public BinarFudView() {
-		controllerOrder = new ControllerOrder(this);
-		controllerProduct = new ControllerProduct(this);
-		frame = new JFrame("BinarFud");
-		menuItemToProduct = new HashMap<>();
-		serviceProduct = new ServiceProductImpl();
-
-		// ... (rest of your code)
-
-		// Create a menu bar
-		menuBar = new JMenuBar();
-
-		JMenu fileMenu = new JMenu("File");
-
-		// Create a "File Menu Item" menu item
-		JMenuItem viewFileMenuItem = new JMenuItem("Ekspor to excel");
-		viewFileMenuItem.addActionListener(e -> {
-			// Add code to open and display the file
-			// You can create a new JFrame for the chart here
-		});
-
-		fileMenu.add(viewFileMenuItem);
-
-		// Create a "Chart" menu
-		JMenu chartMenu = new JMenu("Statistik");
-
-		// Create a "View Chart" menu item
-		JMenuItem viewChartMenuItem = new JMenuItem("Lihat Statistik");
-		viewChartMenuItem.addActionListener(e -> {
-			// Add code to open and display the chart
-			// You can create a new JFrame for the chart here
-		});
-
-		chartMenu.add(viewChartMenuItem);
-
-		// Create a "Management" menu
-		JMenu managementMenu = new JMenu("Manajemen");
-
-		// Create a "Manage Products" menu item
-		JMenuItem manageProductsMenuItem = new JMenuItem("Manajemen Makanan");
-		manageProductsMenuItem.addActionListener(e -> {
-			// Add code to open a management window for products
-			// You can create a new JFrame for product management here
-		});
-
-		managementMenu.add(manageProductsMenuItem);
-
-		// Add the "File", "Chart" and "Management" menus to the menu bar
-		menuBar.add(fileMenu);
-		menuBar.add(chartMenu);
-		menuBar.add(managementMenu);
-
-
-		// Create a table with column names
-		String[] columnNames = {"Nama", "Jumlah", "Harga"};
-		tableModel = new DefaultTableModel(columnNames, 0);
-		table = new JTable(tableModel);
-
-		// Create a JScrollPane to hold the table and set its preferred size
-		JScrollPane tableScrollPane = new JScrollPane(table);
-		tableScrollPane.setPreferredSize(new Dimension(300, 200)); // Adjust the dimensions as needed
-
-		// Create a panel for menu buttons
-		JPanel menuPanel = new JPanel(new GridLayout(0, 2));
-
-		// Simulate loading products from a service
-		List<Product> products = controllerProduct.getAllProducts();
-
-		// Create a JButton for each product and associate with products
-		for (Product product : products) {
-			JButton menuItemButton = new JButton(product.getProductName());
-			menuItemButton.setFont(new Font("Times New Roman", Font.BOLD, 14));
-			menuPanel.add(menuItemButton);
-			menuItemToProduct.put(menuItemButton, product);
-
-
-			menuItemButton.addActionListener(e -> {
-				// Retrieve the associated product for the clicked menu item
-				Product clickedProduct = menuItemToProduct.get(menuItemButton);
-				if (clickedProduct != null) {
-					// Show an input dialog to get the quantity
-					String qtyInput = JOptionPane.showInputDialog(frame, "Masukkan jumlah untuk " + product.getProductName() + ":", "Input Jumlah", JOptionPane.QUESTION_MESSAGE);
-					// If the user provides a valid quantity, add a row to the table
-					if (qtyInput != null && !qtyInput.isBlank()) {
-						try {
-							int quantity = Integer.parseInt(qtyInput);
-							String totalPriceIDR = controllerOrder.converterCurrencyRupiah(product.getPrice() * quantity);
-							Object[] row = {product.getProductName(), quantity, totalPriceIDR};
-							controllerOrder.addOrderDetail(product, quantity);
-							tableModel.addRow(row);
-						} catch (NumberFormatException ex) {
-							JOptionPane.showMessageDialog(frame, "Input tidak sah.", "Error", JOptionPane.ERROR_MESSAGE);
-						}
-					} else {
-						JOptionPane.showMessageDialog(frame, "Maaf! Pesanan Anda belum lengkap. Silakan masukkan jumlah yang valid.", "Pesanan Belum Selesai", JOptionPane.ERROR_MESSAGE);
-					}
-				}
-
-			});
-
-		}
-
-		// Create a button for payment
-		bayarButton = new JButton("BAYAR");
-		bayarButton.setForeground(Color.GREEN);
-		bayarButton.setFont(new Font("Times New Roman", Font.BOLD, 20));
-		bayarButton.addActionListener(e -> {
-			controllerOrder.order();
-		});
-
-
-		batalButton = new JButton("BATAL"); // Modify the text as needed
-		batalButton.setForeground(Color.RED);
-		batalButton.setFont(new Font("Times New Roman", Font.BOLD, 20));
-		batalButton.addActionListener(e -> {
-			int confirm = JOptionPane.showConfirmDialog(frame, "Kamu yakin ingin membatalkan semua pesanan?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
-			if (confirm == JOptionPane.YES_OPTION) {
-				// User confirmed, clear the order
-				controllerOrder.clearOrder();
-			}
-		});
-		totalPesanan = new JButton("Total: 0"); // Modify the text as needed
-		totalPesanan.setEnabled(false);
-		totalPesanan.setFont(new Font("Times New Roman", Font.BOLD, 20));
-
-		JPanel bayarAndTotalPanel = new JPanel(new GridLayout(1, 1));
-		bayarAndTotalPanel.add(bayarButton);
-		bayarAndTotalPanel.add(batalButton);
-		bayarAndTotalPanel.add(totalPesanan);
-
-
-		// Create a panel to hold the table and Bayar/Total buttons
-		JPanel tableAndButtonPanel = new JPanel(new BorderLayout());
-		tableAndButtonPanel.add(tableScrollPane, BorderLayout.CENTER);
-		tableAndButtonPanel.add(bayarAndTotalPanel, BorderLayout.SOUTH);
-
-		// Add components to the frame using BorderLayout
-		frame.add(menuPanel, BorderLayout.WEST);
-		frame.add(tableAndButtonPanel, BorderLayout.CENTER);
-
-		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		frame.setSize(1000, 600); // Adjust the frame size as needed
-		frame.setJMenuBar(menuBar);
-		frame.setVisible(true);
-	}
-
-
-
-}
Index: challenge2/src/main/java/org/example/challenge3/model/Product.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/model/Product.java b/challenge2/src/main/java/org/example/challenge3/model/Product.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/model/Product.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.*;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@Builder
-public class Product {
-	private UUID id;
-	private String productName;
-	private Double price;
-	private UUID merchantId;
-
-}
Index: challenge1/src/main/java/org/example/challenge3/service/ServiceProductImpl.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/service/ServiceProductImpl.java b/challenge1/src/main/java/org/example/challenge3/service/ServiceProductImpl.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/service/ServiceProductImpl.java	
+++ /dev/null	
@@ -1,38 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Product;
-import org.example.challenge3.sql.ConnectionManager;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-public class ServiceProductImpl implements ServiceProduct{
-	@Override
-	public List<Product> findAll() {
-		String query = "SELECT id, product_name, price, merchant_id FROM public.products";
-		List<Product> products = new ArrayList<>();
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query);
-		     ResultSet resultSet = preparedStatement.executeQuery()) {
-			while (resultSet.next()) {
-				UUID id = UUID.fromString(resultSet.getString("id"));
-				String productName = resultSet.getString("product_name");
-				double price = resultSet.getDouble("price");
-				UUID merchantId = UUID.fromString(resultSet.getString("merchant_id"));
-
-				Product product = new Product(id, productName, price, merchantId);
-				products.add(product);
-			}
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to retrieve products from the database.", e);
-		}
-		return products;
-	}
-
-}
Index: challenge3/src/main/java/org/example/challenge2/model/Pesanan.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/model/Pesanan.java b/challenge3/src/main/java/org/example/challenge2/model/Pesanan.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/model/Pesanan.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package org.example.challenge2.model;
-
-import jakarta.validation.constraints.Max;
-import jakarta.validation.constraints.Min;
-import lombok.*;
-
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString
-public class Pesanan {
-    String nama;
-    int jumlah;
-    long harga;
-
-}
Index: challenge3/src/main/java/org/example/challenge1/MenuMakanan.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge1/MenuMakanan.java b/challenge3/src/main/java/org/example/challenge1/MenuMakanan.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge1/MenuMakanan.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-package org.example.challenge1;
-
-public record MenuMakanan(long id, String nama, long harga) {
-}
Index: challenge3/src/main/java/org/example/challenge2/Main.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/Main.java b/challenge3/src/main/java/org/example/challenge2/Main.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/Main.java	
+++ /dev/null	
@@ -1,24 +0,0 @@
-package org.example.challenge2;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.view.View;
-
-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.text.DecimalFormat;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-
-public class Main {
-//    List untuk menuMakanan
-
-
-    public static void main(String[] args) {
-        View.execute();
-    }
-
-
-}
\ No newline at end of file
Index: challenge2/src/main/java/org/example/challenge3/Main.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/Main.java b/challenge2/src/main/java/org/example/challenge3/Main.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/Main.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package org.example.challenge3;
-
-import org.example.challenge3.view.BinarFudView;
-
-import javax.swing.*;
-
-public class Main {
-
-		public static void main(String[] args) {
-			try {
-				//here you can put the selected theme class name in JTattoo
-				UIManager.setLookAndFeel("com.jtattoo.plaf.graphite.GraphiteLookAndFeel");
-			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
-			         UnsupportedLookAndFeelException ex) {
-				java.util.logging.Logger.getLogger(BinarFudView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-			}
-			SwingUtilities.invokeLater(BinarFudView::new);
-		}
-}
Index: challenge1/src/main/java/org/example/challenge2/model/Pesanan.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/model/Pesanan.java b/challenge1/src/main/java/org/example/challenge2/model/Pesanan.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/model/Pesanan.java	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package org.example.challenge2.model;
-
-import jakarta.validation.constraints.Max;
-import jakarta.validation.constraints.Min;
-import lombok.*;
-
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString
-public class Pesanan {
-    String nama;
-    int jumlah;
-    long harga;
-
-}
Index: challenge3/src/main/java/org/example/challenge2/view/View.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/view/View.java b/challenge3/src/main/java/org/example/challenge2/view/View.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/view/View.java	
+++ /dev/null	
@@ -1,87 +0,0 @@
-package org.example.challenge2.view;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.controller.ControllerPesanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.util.Utils;
-
-import java.text.DecimalFormat;
-import java.util.List;
-
-import static org.example.challenge1.Main.cetakInvoice;
-import static org.example.challenge2.model.Databases.listPesanan;
-
-public class View {
-
-    private static ControllerPesanan controllerPesanan = new ControllerPesanan();
-
-
-    public static void execute(){
-        controllerPesanan.menuUtamaTampilan();
-    }
-
-    public static void konfirmasiPesananTampilan() {
-        System.out.println("Berapa pesanan anda");
-        System.out.println(" " + controllerPesanan.getNamaPesanan() + "  |  " + controllerPesanan.getHargaPesanan());
-        System.out.println("Input 0 untuk kembali");
-        System.out.print("\nqty => ");
-        controllerPesanan.inputKonfirmasiPesanan();
-    }
-
-    public static void menuMakananTampilan() {
-        List<MenuMakanan> menuMakanan = controllerPesanan.getListMenuMakanan();
-        for (MenuMakanan makanan : menuMakanan) {
-            System.out.printf("%d. %-20s | %s \n", makanan.getId(), makanan.getNama(), rupiahKonversi(makanan.getHarga()));
-        }
-    }
-
-    public static void pembayaranTampilan() {
-        if (pesananDitemukan()){
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("Konfirmasi & Pembayaran");
-            System.out.println(Utils.LINE_EQUALS);
-            int total = 0;
-            long totalHarga = 0;
-            for (Pesanan objek : listPesanan) {
-                System.out.printf(Utils.FORMAT_PESANAN, objek.getNama(), objek.getJumlah(), rupiahKonversi(objek.getHarga()));
-                total += objek.getJumlah();
-                totalHarga += objek.getHarga();
-            }
-            System.out.println(Utils.LINE_DASH);
-            System.out.printf(Utils.FORMAT_PESANAN, "total", total, rupiahKonversi(totalHarga));
-            System.out.println("1. Konfirmasi dan Bayar");
-            System.out.println("2. Kembali ke Menu Utama");
-            System.out.println("0. Keluar Aplikasi");
-            System.out.print(Utils.INPUT_ARROW);
-            controllerPesanan.setTotal(total);
-            controllerPesanan.setTotalHarga(totalHarga);
-            controllerPesanan.inputKonfirmasiPembayaran();
-        } else {
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("MINIMAL 1 JUMLAH PESANAN");
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("\n\n ");
-        }
-    }
-
-    private static boolean pesananDitemukan() {
-        return !listPesanan.isEmpty();
-    }
-
-    public static void konfirmasiInputTidakDikenalTampilan() {
-        System.out.println(Utils.LINE_EQUALS);
-        System.out.println("Mohon masukan input pilihan anda ");
-        System.out.println(Utils.LINE_EQUALS);
-        System.out.println("(Y) untuk lanjut");
-        System.out.println("(N) untuk keluar");
-        System.out.print(Utils.INPUT_ARROW);
-        controllerPesanan.inputKonfirmasiUser();
-    }
-
-    public static String rupiahKonversi(long harga){
-        DecimalFormat pattern = new DecimalFormat("#.###");
-        return pattern.format(harga);
-    }
-
-
-}
Index: challenge1/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java b/challenge1/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java	
+++ /dev/null	
@@ -1,137 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.OrderDetail;
-import org.example.challenge3.sql.ConnectionManager;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.List;
-import java.util.UUID;
-
-public class ServiceOrderImpl implements ServiceOrder {
-
-	@Override
-	public void createOrder(Order order) {
-		String query = "INSERT INTO public.orders(\n" +
-				"\tid, order_time, destination_address, user_id, is_complete)\n" +
-				"\tVALUES (?, ?, ?, ?, ?);";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-
-			preparedStatement.setObject(1, order.getId());
-			preparedStatement.setObject(2, order.getOrderTime());
-			preparedStatement.setString(3, order.getDestinationAdress());
-			preparedStatement.setObject(4, order.getUserId());
-			preparedStatement.setBoolean(5, order.isComplete());
-			preparedStatement.executeUpdate();
-			System.out.println("Order inserted successfully.");
-
-
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to create order in the database.", e);
-		}
-	}
-
-	public void createOrderDetail(OrderDetail orderDetail) {
-		String query = "INSERT INTO public.order_details(\n" +
-				"\tid, order_id, product_id, quantity, total_price)\n" +
-				"\tVALUES (?, ?, ?, ?, ?);";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-
-			preparedStatement.setObject(1, orderDetail.getId());
-			preparedStatement.setObject(2, orderDetail.getOrderId());
-			preparedStatement.setObject(3, orderDetail.getProductId());
-			preparedStatement.setInt(4, orderDetail.getQuantity());
-			preparedStatement.setDouble(5, orderDetail.getTotalPrice());
-
-
-			preparedStatement.executeUpdate();
-			System.out.println("Order detail inserted successfully.");
-
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to create order detail in the database.", e);
-		}
-	}
-
-	@Override
-	public Double getTotalPriceOfOrder() {
-		String query = "SELECT SUM(total_price) AS total_price\n" +
-				"FROM public.order_details;";
-		Double totalPrice = null;
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query);
-		     ResultSet resultSet = preparedStatement.executeQuery()) {
-
-			if (resultSet.next()) {
-				totalPrice = resultSet.getDouble("total_price");
-			}
-
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to retrieve total order price from the database.", e);
-		}
-
-		return totalPrice;
-	}
-
-	@Override
-	public Order getOrderByUserId(UUID userId) {
-		String query = "SELECT * FROM orders WHERE user_id = ?";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-
-			preparedStatement.setObject(1, userId);
-			try (ResultSet resultSet = preparedStatement.executeQuery()) {
-				if (resultSet.next()) {
-					Order order = new Order();
-					order.setId((UUID) resultSet.getObject("id"));
-					order.setUserId((UUID) resultSet.getObject("user_id"));
-					order.setDestinationAdress(resultSet.getString("destination_address"));
-					order.setComplete(resultSet.getBoolean("is_complete"));
-					return order;
-				}
-				System.out.println("Order detail inserted successfully.");
-
-			} catch (SQLException e) {
-				throw new RuntimeException("Failed to create order detail in the database.", e);
-			}
-		} catch (SQLException e) {
-			throw new RuntimeException(e);
-		}
-		return null;
-	}
-
-	@Override
-	public OrderDetail getOrderDetailById(UUID orderDetailId) {
-		String query = "SELECT * FROM public.order_details WHERE id = ?";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-			preparedStatement.setObject(1, orderDetailId);
-
-			try (ResultSet resultSet = preparedStatement.executeQuery()) {
-				if (resultSet.next()) {
-					OrderDetail orderDetail = new OrderDetail();
-					orderDetail.setId((UUID) resultSet.getObject("id"));
-					orderDetail.setOrderId((UUID) resultSet.getObject("order_id"));
-					orderDetail.setProductId((UUID) resultSet.getObject("product_id"));
-					orderDetail.setQuantity(resultSet.getInt("quantity"));
-					orderDetail.setTotalPrice(resultSet.getDouble("total_price"));
-					return orderDetail;
-				}
-			}
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to retrieve order detail from the database.", e);
-		}
-		return null; // Return null if order detail is not found
-	}
-
-
-}
Index: challenge3/src/main/java/org/example/challenge2/services/ServicePesananImpl.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/services/ServicePesananImpl.java b/challenge3/src/main/java/org/example/challenge2/services/ServicePesananImpl.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/services/ServicePesananImpl.java	
+++ /dev/null	
@@ -1,50 +0,0 @@
-package org.example.challenge2.services;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.model.Databases;
-
-import java.util.List;
-
-public class ServicePesananImpl implements ServicePesanan {
-
-    @Override
-    public List<MenuMakanan> findAllMenus() {
-        return Databases.menuMakanan;
-    }
-
-    @Override
-    public List<Pesanan> findAllPesanan() {
-        return Databases.listPesanan;
-    }
-
-    @Override
-    public void savePesanan(Pesanan pesanan) {
-        pesanan.setHarga(pesanan.getHarga() * pesanan.getJumlah());
-        for (Pesanan object: Databases.listPesanan) {
-            if (object.getNama().equalsIgnoreCase(pesanan.getNama())){
-                pesanan.setJumlah(object.getJumlah() + pesanan.getJumlah());
-                pesanan.setHarga(object.getHarga() + pesanan.getHarga());
-                Databases.listPesanan.remove(object);
-                break;
-            }
-        }
-        Databases.listPesanan.add(pesanan);
-        System.out.println(Databases.listPesanan);
-    }
-
-    @Override
-    public void saveMenuMakanan(MenuMakanan menuMakanan) {
-
-    }
-
-    @Override
-    public void update(Pesanan pesanan) {
-
-    }
-
-    @Override
-    public void deleteByID(long id) {
-
-    }
-}
Index: challenge1/src/main/java/org/example/challenge3/sql/InfoUser.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/sql/InfoUser.java b/challenge1/src/main/java/org/example/challenge3/sql/InfoUser.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/sql/InfoUser.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package org.example.challenge3.sql;
-
-import java.util.UUID;
-
-public class InfoUser {
-	public final static UUID USER_ID = UUID.fromString("0acd0373-f682-4482-b797-826c8dfcf90a");
-	public final static String NAME = "dhikap";
-	public final static String DESTINATION = "Jakarta";
-}
Index: challenge2/src/main/java/org/example/challenge3/model/Users.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/model/Users.java b/challenge2/src/main/java/org/example/challenge3/model/Users.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/model/Users.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge3.model;
-
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-public class Users {
-	private UUID id;
-	private String username;
-	private String emailAdress;
-	private String password;
-}
Index: challenge3/src/main/java/org/example/challenge2/model/MenuMakanan.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/model/MenuMakanan.java b/challenge3/src/main/java/org/example/challenge2/model/MenuMakanan.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/model/MenuMakanan.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package org.example.challenge2.model;
-
-import lombok.*;
-
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString
-public class MenuMakanan {
-    long id;
-    String nama;
-    long harga;
-
-}
Index: challenge2/src/main/java/org/example/challenge3/sql/ConnectionManager.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/sql/ConnectionManager.java b/challenge2/src/main/java/org/example/challenge3/sql/ConnectionManager.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/sql/ConnectionManager.java	
+++ /dev/null	
@@ -1,99 +0,0 @@
-package org.example.challenge3.sql;
-
-import org.example.challenge3.model.Merchant;
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.Product;
-import org.example.challenge3.model.Users;
-
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-import java.util.UUID;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- *
- * @author Andhika Prameswara <prameswaara@gmail.com>
- */
-public class ConnectionManager {
-
-	private static final String USER = "postgres";
-	private static final String PASSWORD = "dikatampan";
-
-
-	public static Connection getConnection(String db) {
-		String driver = "org.postgresql.Driver";
-		Connection con = null;
-		try {
-			Class.forName(driver);
-			con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/" + db, USER, PASSWORD);
-			System.out.println("Database connection succed!");
-		} catch (ClassNotFoundException | SQLException e) {
-			Logger.getLogger(ConnectionManager.class.getName()).log(Level.WARNING, null, e);
-			System.out.println("Database connection failed!");
-		}
-		return con;
-	}
-
-	public static void main(String[] args) {
-//		createUser(new Users(UUID.randomUUID(), "dhikap", "prameswaara@gmail.com", "dikatampan"));
-//		createMerchant(new Merchant(UUID.randomUUID(), "AzelFood", "Jakarta", true));
-//		createProduct(new Product(UUID.randomUUID(), "Nasi Goreng",  15000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Mie Goreng", 13000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Nasi + Ayam", 18000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Es Teh Manis", 3000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Es Jeruk", 5000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-
-	}
-
-	private static void createProduct(Product product) {
-		String insertSql = "INSERT INTO products (id, product_name, price, merchant_id) VALUES (?, ?, ?, ?)";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(insertSql)) {
-			preparedStatement.setObject(1, product.getId());
-			preparedStatement.setString(2, product.getProductName());
-			preparedStatement.setDouble(3, product.getPrice());
-			preparedStatement.setObject(4, product.getMerchantId());
-			preparedStatement.executeUpdate();
-			System.out.println("Product inserted successfully.");
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to insert product into the database.", e);
-		}
-	}
-
-	private static void createMerchant(Merchant merchant) throws SQLException {
-		String query = "INSERT INTO public.merchants(id, merchant_name, merchant_location, is_open) VALUES (?, ?, ?, ?);";
-
-		try (Connection conn = ConnectionManager.getConnection("binarfud"); PreparedStatement preparedStatement = conn.prepareStatement(query)) {
-			preparedStatement.setObject(1, merchant.getId());
-			preparedStatement.setString(2, merchant.getMerchantName());
-			preparedStatement.setString(3, merchant.getMerchantLocation());
-			preparedStatement.setBoolean(4, merchant.isOpen());
-			preparedStatement.executeUpdate();
-			System.out.println("Merchant created successfully.");
-		} catch (SQLException e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-
-	private static void createUser(Users users) throws SQLException {
-		String query = "INSERT INTO public.users(id, username, email_address, password) VALUES (?, ?, ?, ?)";
-		try (Connection conn = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = conn.prepareStatement(query)) {
-			preparedStatement.setObject(1, users.getId());
-			preparedStatement.setString(2, users.getUsername());
-			preparedStatement.setString(3, users.getEmailAdress());
-			preparedStatement.setString(4, users.getPassword());
-			preparedStatement.executeUpdate();
-			System.out.println("User created successfully.");
-		} catch (SQLException e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-
-}
Index: challenge2/src/main/java/org/example/challenge3/service/ServiceOrder.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/service/ServiceOrder.java b/challenge2/src/main/java/org/example/challenge3/service/ServiceOrder.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/service/ServiceOrder.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.OrderDetail;
-
-import java.util.List;
-import java.util.UUID;
-
-public interface ServiceOrder {
-	 void createOrder(Order order);
-
-	 void createOrderDetail(OrderDetail orderDetail);
-
-	 Double getTotalPriceOfOrder();
-
-	 Order getOrderByUserId(UUID userId);
-
-	OrderDetail getOrderDetailById(UUID orderDetailID);
-}
Index: challenge2/src/main/java/org/example/challenge3/service/ServiceProductImpl.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/service/ServiceProductImpl.java b/challenge2/src/main/java/org/example/challenge3/service/ServiceProductImpl.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/service/ServiceProductImpl.java	
+++ /dev/null	
@@ -1,38 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Product;
-import org.example.challenge3.sql.ConnectionManager;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-public class ServiceProductImpl implements ServiceProduct{
-	@Override
-	public List<Product> findAll() {
-		String query = "SELECT id, product_name, price, merchant_id FROM public.products";
-		List<Product> products = new ArrayList<>();
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query);
-		     ResultSet resultSet = preparedStatement.executeQuery()) {
-			while (resultSet.next()) {
-				UUID id = UUID.fromString(resultSet.getString("id"));
-				String productName = resultSet.getString("product_name");
-				double price = resultSet.getDouble("price");
-				UUID merchantId = UUID.fromString(resultSet.getString("merchant_id"));
-
-				Product product = new Product(id, productName, price, merchantId);
-				products.add(product);
-			}
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to retrieve products from the database.", e);
-		}
-		return products;
-	}
-
-}
Index: challenge1/src/main/java/org/example/challenge3/model/Users.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/model/Users.java b/challenge1/src/main/java/org/example/challenge3/model/Users.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/model/Users.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge3.model;
-
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-public class Users {
-	private UUID id;
-	private String username;
-	private String emailAdress;
-	private String password;
-}
Index: challenge2/src/main/java/org/example/challenge3/model/Merchant.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/model/Merchant.java b/challenge2/src/main/java/org/example/challenge3/model/Merchant.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/model/Merchant.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-public class Merchant {
-	private UUID id;
-	private String merchantName;
-	private String merchantLocation;
-	private boolean isOpen;
-
-}
Index: challenge3/src/main/java/org/example/challenge1/Pesanan.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge1/Pesanan.java b/challenge3/src/main/java/org/example/challenge1/Pesanan.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge1/Pesanan.java	
+++ /dev/null	
@@ -1,5 +0,0 @@
-package org.example.challenge1;
-
-public record Pesanan(String nama, int jumlah, long harga) {
-
-}
Index: challenge1/src/main/java/org/example/challenge3/Main.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/Main.java b/challenge1/src/main/java/org/example/challenge3/Main.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/Main.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package org.example.challenge3;
-
-import org.example.challenge3.view.BinarFudView;
-
-import javax.swing.*;
-
-public class Main {
-
-		public static void main(String[] args) {
-			try {
-				//here you can put the selected theme class name in JTattoo
-				UIManager.setLookAndFeel("com.jtattoo.plaf.graphite.GraphiteLookAndFeel");
-			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
-			         UnsupportedLookAndFeelException ex) {
-				java.util.logging.Logger.getLogger(BinarFudView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
-			}
-			SwingUtilities.invokeLater(BinarFudView::new);
-		}
-}
Index: challenge2/src/main/java/org/example/challenge1/Main.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge1/Main.java b/challenge2/src/main/java/org/example/challenge1/Main.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge1/Main.java	
+++ /dev/null	
@@ -1,136 +0,0 @@
-package org.example.challenge1;
-
-import java.io.*;
-import java.text.DecimalFormat;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-
-
-
-public class Main {
-//    List untuk menuMakanan
-    static final String line1 = "================================================================";
-    static final String line2 = "---------------------------------------------------------------+\n";
-    static final String inputArrow = "\n=> ";
-    static final String formatPesanan = "%-14s %5d %15s\n";
-
-    static final Scanner scan = new Scanner(System.in);
-    static final List<MenuMakanan> menuMakanan = List.of(
-                new MenuMakanan(1,"Nasi Goreng", 15000),
-                new MenuMakanan(2,"Mie Goreng", 13000),
-                new MenuMakanan(3,"Nasi + Ayam", 18000),
-                new MenuMakanan(4,"Es Teh Manis", 3000),
-                new MenuMakanan(5,"Es Jeruk", 5000));
-    static List<Pesanan> menuPesanan = new ArrayList<>();
-
-    public static void main(String[] args) {
-
-    }
-
-    private static void menuUtamaTampilan() {
-//        Buat tampilan cli yang akan di ulang hingga selama user tidak memilih keluar dari aplikasi dan tidak menyelesaikan pembayaran
-//        karna switch 1 sd 5 adalah fitur memesan makanan, jadi saya buat satu scope
-//        ketika user memilih keluar dari aplikasi maka loop akan berhenti dan program akan keluar
-        while (true) {
-            System.out.println(line1);
-            System.out.println("Selamat datang di BinarFud");
-            System.out.println(line1);
-            System.out.println("\nSilahkan pilih makanan :");
-            for (MenuMakanan makanan : menuMakanan) {
-                System.out.printf("%d. %-20s | %s \n", makanan.id(), makanan.nama(), rupiahKonversi(makanan.harga()));
-            }
-            System.out.println("99. Pesan dan Bayar");
-            System.out.println("0. Keluar aplikasi");
-            System.out.print(inputArrow);
-            if (scan.hasNextByte()){
-                byte pilihan = scan.nextByte();
-                switch (pilihan) {
-                    case 1, 2, 3, 4, 5 -> konfirmasiPesananTampilan(pilihan);
-                    case 99 -> pembayaranTampilan();
-                    case 0 ->
-                            System.exit(0);
-                    default -> System.out.println("Tolong input dengan benar");
-                }
-            } else {
-                System.out.println("Tolong input dengan benar");            }
-        }
-    }
-
-    private static void pembayaranTampilan() {
-        System.out.println(line1);
-        System.out.println("Konfirmasi & Pembayaran");
-        System.out.println(line1);
-        int jumlahTotal = 0;
-        long jumlahHarga = 0;
-        for (Pesanan objek: menuPesanan) {
-            System.out.printf(formatPesanan, objek.nama(), objek.jumlah(), rupiahKonversi(objek.harga()));
-            jumlahTotal += objek.jumlah();
-            jumlahHarga += objek.harga();
-        }
-        System.out.println(line2);
-        System.out.printf(formatPesanan, "total", jumlahTotal, rupiahKonversi(jumlahHarga));
-        System.out.println("1. Konfirmasi dan Bayar");
-        System.out.println("2. Kembali ke Menu Utama");
-        System.out.println("0. Keluar Aplikasi");
-        System.out.print("\n=> ");
-        byte pilihan = new Scanner(System.in).nextByte();
-        switch (pilihan) {
-            case 1 -> cetakInvoice(jumlahTotal, jumlahHarga);
-            case 2 -> System.out.println("Kembali ke menu Utama");
-            case 0 -> System.exit(0);
-            default -> System.out.println("Tolong input dengan benar");
-        }
-    }
-
-
-    public static void cetakInvoice(int jumlahTotal, long jumlahHarga) {
-        try (BufferedWriter writer = new BufferedWriter(new FileWriter("invoice_pembayaran.txt"))) {
-            writer.write(line1);
-            writer.write("\nBinarFud\n");
-            writer.write(line1);
-            writer.write("\nTerima kasih sudah memesan\ndi BinarFud");
-            writer.write("\n\nDibawah ini pesanan anda\n\n");
-            for (Pesanan objek : menuPesanan) {
-                writer.write(String.format("%-14s %5d %15s\n", objek.nama(), objek.jumlah(), rupiahKonversi(objek.harga())));
-            }
-            writer.write(line2);
-            writer.write(String.format("%-14s %5d %15s\n\n", "total", jumlahTotal, rupiahKonversi(jumlahHarga)));
-            writer.write("Pembayaran : Binar Cash\n");
-            writer.write(line1);
-            writer.write("\nSimpan struk ini sebagai\n");
-            writer.write("Bukti pembayaran\n");
-            writer.write(line1);
-        } catch (IOException exception) {
-            exception.printStackTrace();
-        }
-    }
-
-        public static void konfirmasiPesananTampilan(byte pilihan){
-            System.out.println(line1);
-            System.out.println("Berapa pesanan anda");
-            System.out.println(line1);
-            System.out.println(" " + menuMakanan.get(pilihan - 1).nama() + "  |  " + menuMakanan.get(pilihan - 1));
-            System.out.println("Input 0 untuk kembali");
-            System.out.print("\nqty => ");
-            String nama = menuMakanan.get(pilihan - 1).nama();
-            byte jumlah = new Scanner(System.in).nextByte();
-            long harga = menuMakanan.get(pilihan - 1).harga() * jumlah;
-            for (Pesanan pesanan1 : menuPesanan) {
-                if (pesanan1.nama().equalsIgnoreCase(nama)) {
-                    jumlah += pesanan1.jumlah();
-                    harga += pesanan1.harga();
-                    menuPesanan.remove(pesanan1);
-                    break;
-                }
-            }
-//        lalu data akan ditambahkan ulang, untuk mencegah duplikasi menu pada listPesanan
-            menuPesanan.add(new Pesanan(nama, jumlah, harga));
-        }
-
-
-    public static String rupiahKonversi(long harga){
-        DecimalFormat pattern = new DecimalFormat("#.###");
-        return pattern.format(harga);
-    }
-}
\ No newline at end of file
Index: challenge1/src/main/java/org/example/challenge3/service/ServiceProduct.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/service/ServiceProduct.java b/challenge1/src/main/java/org/example/challenge3/service/ServiceProduct.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/service/ServiceProduct.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Product;
-
-import java.util.List;
-
-public interface ServiceProduct {
-	public List<Product> findAll();
-	default void createProduct(Product product) {
-		// default method implementation
-	}
-	default void deleteProduct(long id) {
-		// default method implementation
-	}
-}
Index: challenge1/src/main/java/org/example/challenge3/controller/ControllerOrder.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/controller/ControllerOrder.java b/challenge1/src/main/java/org/example/challenge3/controller/ControllerOrder.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/controller/ControllerOrder.java	
+++ /dev/null	
@@ -1,80 +0,0 @@
-package org.example.challenge3.controller;
-
-import lombok.extern.java.Log;
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.OrderDetail;
-import org.example.challenge3.model.Product;
-import org.example.challenge3.service.ServiceOrder;
-import org.example.challenge3.service.ServiceOrderImpl;
-import org.example.challenge3.service.ServiceProduct;
-import org.example.challenge3.service.ServiceProductImpl;
-import org.example.challenge3.sql.InfoUser;
-import org.example.challenge3.view.BinarFudView;
-
-import javax.swing.*;
-import java.text.NumberFormat;
-import java.time.LocalDate;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.UUID;
-import java.util.logging.Logger;
-
-public class ControllerOrder {
-
-	BinarFudView binarFudView;
-	ServiceOrder serviceOrder;
-	List<OrderDetail> listOrderDetail;
-
-
-	public ControllerOrder(BinarFudView binarFudView) {
-		this.binarFudView = binarFudView;
-		this.serviceOrder = new ServiceOrderImpl();
-		this.listOrderDetail = new ArrayList<>();
-	}
-
-	public void order() {
-		try {
-			UUID orderId = UUID.randomUUID();
-			Order order = Order.builder().id(orderId).userId(InfoUser.USER_ID).orderTime(LocalDate.now()).destinationAdress(InfoUser.DESTINATION).isComplete(true).build();
-			serviceOrder.createOrder(order);
-
-//		set orderID of each orderDetail
-			for (OrderDetail orderDetail : listOrderDetail) {
-				orderDetail.setOrderId(orderId);
-				serviceOrder.createOrderDetail(orderDetail);
-			}
-			System.out.print("Order created Succesfully");
-		} catch (Exception e) {
-			System.out.print("Order created is not Succesfully: " + e);
-		}
-	}
-
-
-	public void addOrderDetail(Product product, int quantity) {
-		Double totalPrice = product.getPrice() * quantity;
-		listOrderDetail.add(OrderDetail.builder().id(UUID.randomUUID()).productId(product.getId()).quantity(quantity).totalPrice(totalPrice).build());
-		updateTotalPrice();
-	}
-
-	public void updateTotalPrice() {
-		if (!listOrderDetail.isEmpty()) {
-			double totalOrderPrice = listOrderDetail.stream().mapToDouble(OrderDetail::getTotalPrice).sum();
-			binarFudView.getTotalPesanan().setText("Total: " + converterCurrencyRupiah(totalOrderPrice));
-		}
-	}
-
-	public void clearOrder(){
-		binarFudView.getTableModel().setRowCount(0);
-		binarFudView.getTotalPesanan().setText("Total: " + 0);
-		listOrderDetail.clear();
-	}
-
-	public String converterCurrencyRupiah(double value) {
-		// Create a NumberFormat instance for Indonesian currency format
-		NumberFormat rupiahFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));
-
-		// Format the value as Indonesian Rupiah
-		return rupiahFormat.format(value);
-	}
-}
Index: challenge1/src/main/java/org/example/challenge2/model/Databases.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/model/Databases.java b/challenge1/src/main/java/org/example/challenge2/model/Databases.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/model/Databases.java	
+++ /dev/null	
@@ -1,19 +0,0 @@
-package org.example.challenge2.model;
-
-import jakarta.validation.Valid;
-import jakarta.validation.constraints.Min;
-import org.example.challenge2.model.Pesanan;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class Databases {
-    public static final List<MenuMakanan> menuMakanan = List.of(
-            new MenuMakanan(1,"Nasi Goreng", 15000),
-            new MenuMakanan(2,"Mie Goreng", 13000),
-            new MenuMakanan(3,"Nasi + Ayam", 18000),
-            new MenuMakanan(4,"Es Teh Manis", 3000),
-            new MenuMakanan(5,"Es Jeruk", 5000));
-
-    public static List<Pesanan> listPesanan = new ArrayList<Pesanan>();
-}
Index: challenge1/src/main/java/org/example/challenge2/model/MenuMakanan.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/model/MenuMakanan.java b/challenge1/src/main/java/org/example/challenge2/model/MenuMakanan.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/model/MenuMakanan.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package org.example.challenge2.model;
-
-import lombok.*;
-
-@Getter
-@Setter
-@NoArgsConstructor
-@AllArgsConstructor
-@ToString
-public class MenuMakanan {
-    long id;
-    String nama;
-    long harga;
-
-}
Index: challenge2/src/main/java/org/example/challenge1/MenuMakanan.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge1/MenuMakanan.java b/challenge2/src/main/java/org/example/challenge1/MenuMakanan.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge1/MenuMakanan.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-package org.example.challenge1;
-
-public record MenuMakanan(long id, String nama, long harga) {
-}
Index: challenge3/src/main/java/org/example/challenge2/controller/ControllerPesanan.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/controller/ControllerPesanan.java b/challenge3/src/main/java/org/example/challenge2/controller/ControllerPesanan.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/controller/ControllerPesanan.java	
+++ /dev/null	
@@ -1,156 +0,0 @@
-package org.example.challenge2.controller;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.services.ServicePesanan;
-import org.example.challenge2.services.ServicePesananImpl;
-import org.example.challenge2.util.Utils;
-
-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.util.InputMismatchException;
-import java.util.List;
-
-import static org.example.challenge2.view.View.*;
-
-public class ControllerPesanan {
-    ServicePesanan servicePesanan;
-    private  List<MenuMakanan> listMenuMakanan;
-    private  List<Pesanan> listPesanan;
-
-    private static int inputPilihan = 0 ;
-    private int total;
-    private long totalHarga;
-     private static boolean isExit = false;
-
-    public ControllerPesanan() {
-        this.servicePesanan = new ServicePesananImpl();
-        listMenuMakanan = servicePesanan.findAllMenus();
-        listPesanan = servicePesanan.findAllPesanan();
-    }
-    public void menuUtamaTampilan() {
-        while (!isExit) {
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("Selamat datang di BinarFud");
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("\nSilahkan pilih makanan :");
-            menuMakananTampilan();
-            System.out.println("99. Pesan dan Bayar");
-            System.out.println("0. Keluar aplikasi");
-            System.out.print(Utils.INPUT_ARROW);
-            inputPilihan();
-        }
-    }
-
-    public void inputPilihan(){
-        try {
-            inputPilihan = Utils.scan.nextByte();
-            Utils.scan.nextLine();
-            switch (inputPilihan) {
-                case 1, 2, 3, 4, 5 -> konfirmasiPesananTampilan();
-                case 99 -> pembayaranTampilan();
-                case 0 -> {
-                    isExit = true;
-                    System.exit(0);
-                }
-                default ->{
-                    konfirmasiInputTidakDikenalTampilan();
-                }
-            }
-        } catch (InputMismatchException ignored){
-            konfirmasiInputTidakDikenalTampilan();
-        }
-    }
-
-    public void inputKonfirmasiPesanan(){
-        try {
-        int jumlah = Utils.scan.nextByte();
-        long harga = getHargaPesanan();
-        String namaPesanan = getNamaPesanan();
-        servicePesanan.savePesanan(new Pesanan(namaPesanan, jumlah, harga));
-        }catch (InputMismatchException ignored){
-            konfirmasiInputTidakDikenalTampilan();
-        }
-    }
-
-    public void inputKonfirmasiPembayaran() {
-        byte pilihan = Utils.scan.nextByte();
-        switch (pilihan) {
-            case 1 -> {
-                cetakInvoice();
-                System.out.println("Terimakasih telah berbelanja di Binar Fud! ");
-                System.exit(0);
-            }
-            case 2 -> System.out.println("Kembali ke menu Utama");
-            case 0 -> System.exit(0);
-            default -> konfirmasiInputTidakDikenalTampilan();
-        }
-    }
-
-    public void inputKonfirmasiUser() {
-            Utils.scan.nextLine();
-            String jawaban = Utils.scan.nextLine();
-            if (!jawaban.equalsIgnoreCase("y")) {
-                System.out.println("Goodbye!");
-                System.exit(0);
-            }
-    }
-
-    private void cetakInvoice (){
-            try (BufferedWriter writer = new BufferedWriter(new FileWriter("invoice_pembayaran.txt"))) {
-                writer.write(Utils.LINE_EQUALS);
-                writer.write("\nBinarFud\n");
-                writer.write(Utils.LINE_EQUALS);
-                writer.write("\nTerima kasih sudah memesan\ndi BinarFud");
-                writer.write("\n\nDibawah ini pesanan anda\n\n");
-                for (Pesanan objek : listPesanan) {
-                    writer.write(String.format("%-14s %5d %15s\n", objek.getNama(), objek.getJumlah(), rupiahKonversi(objek.getHarga())));
-                }
-                writer.write(Utils.LINE_DASH);
-                writer.write(String.format("%-14s %5d %15s\n\n", "total", total, rupiahKonversi(totalHarga)));
-                writer.write("Pembayaran : Binar Cash\n");
-                writer.write(Utils.LINE_EQUALS);
-                writer.write("\nSimpan struk ini sebagai\n");
-                writer.write("Bukti pembayaran\n");
-                writer.write(Utils.LINE_DASH);
-            } catch (IOException exception) {
-                exception.printStackTrace();
-            }
-        }
-
-        public List<MenuMakanan> getListMenuMakanan () {
-            return servicePesanan.findAllMenus();
-        }
-
-        public void setListMenuMakanan (List < MenuMakanan > listMenuMakanan) {
-            this.listMenuMakanan = listMenuMakanan;
-        }
-
-        public String getNamaPesanan () {
-            return listMenuMakanan.get(inputPilihan - 1).getNama();
-        }
-
-        public long getHargaPesanan () {
-            return listMenuMakanan.get(inputPilihan - 1).getHarga();
-        }
-
-
-        public int getTotal() {
-            return total;
-        }
-
-        public void setTotal(int total) {
-            this.total = total;
-        }
-
-        public long getTotalHarga() {
-            return totalHarga;
-        }
-
-        public void setTotalHarga(long totalHarga) {
-            this.totalHarga = totalHarga;
-        }
-}
-
-
Index: challenge1/src/main/java/org/example/challenge3/model/Order.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/model/Order.java b/challenge1/src/main/java/org/example/challenge3/model/Order.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/model/Order.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.*;
-
-import java.time.LocalDate;
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@Builder
-@ToString
-public class Order {
-	private UUID id;
-	private LocalDate orderTime;
-	private String destinationAdress;
-	private UUID userId;
-	private boolean isComplete;
-}
Index: challenge1/src/main/java/org/example/challenge2/view/View.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/view/View.java b/challenge1/src/main/java/org/example/challenge2/view/View.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/view/View.java	
+++ /dev/null	
@@ -1,87 +0,0 @@
-package org.example.challenge2.view;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.controller.ControllerPesanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.util.Utils;
-
-import java.text.DecimalFormat;
-import java.util.List;
-
-import static org.example.challenge1.Main.cetakInvoice;
-import static org.example.challenge2.model.Databases.listPesanan;
-
-public class View {
-
-    private static ControllerPesanan controllerPesanan = new ControllerPesanan();
-
-
-    public static void execute(){
-        controllerPesanan.menuUtamaTampilan();
-    }
-
-    public static void konfirmasiPesananTampilan() {
-        System.out.println("Berapa pesanan anda");
-        System.out.println(" " + controllerPesanan.getNamaPesanan() + "  |  " + controllerPesanan.getHargaPesanan());
-        System.out.println("Input 0 untuk kembali");
-        System.out.print("\nqty => ");
-        controllerPesanan.inputKonfirmasiPesanan();
-    }
-
-    public static void menuMakananTampilan() {
-        List<MenuMakanan> menuMakanan = controllerPesanan.getListMenuMakanan();
-        for (MenuMakanan makanan : menuMakanan) {
-            System.out.printf("%d. %-20s | %s \n", makanan.getId(), makanan.getNama(), rupiahKonversi(makanan.getHarga()));
-        }
-    }
-
-    public static void pembayaranTampilan() {
-        if (pesananDitemukan()){
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("Konfirmasi & Pembayaran");
-            System.out.println(Utils.LINE_EQUALS);
-            int total = 0;
-            long totalHarga = 0;
-            for (Pesanan objek : listPesanan) {
-                System.out.printf(Utils.FORMAT_PESANAN, objek.getNama(), objek.getJumlah(), rupiahKonversi(objek.getHarga()));
-                total += objek.getJumlah();
-                totalHarga += objek.getHarga();
-            }
-            System.out.println(Utils.LINE_DASH);
-            System.out.printf(Utils.FORMAT_PESANAN, "total", total, rupiahKonversi(totalHarga));
-            System.out.println("1. Konfirmasi dan Bayar");
-            System.out.println("2. Kembali ke Menu Utama");
-            System.out.println("0. Keluar Aplikasi");
-            System.out.print(Utils.INPUT_ARROW);
-            controllerPesanan.setTotal(total);
-            controllerPesanan.setTotalHarga(totalHarga);
-            controllerPesanan.inputKonfirmasiPembayaran();
-        } else {
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("MINIMAL 1 JUMLAH PESANAN");
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("\n\n ");
-        }
-    }
-
-    private static boolean pesananDitemukan() {
-        return !listPesanan.isEmpty();
-    }
-
-    public static void konfirmasiInputTidakDikenalTampilan() {
-        System.out.println(Utils.LINE_EQUALS);
-        System.out.println("Mohon masukan input pilihan anda ");
-        System.out.println(Utils.LINE_EQUALS);
-        System.out.println("(Y) untuk lanjut");
-        System.out.println("(N) untuk keluar");
-        System.out.print(Utils.INPUT_ARROW);
-        controllerPesanan.inputKonfirmasiUser();
-    }
-
-    public static String rupiahKonversi(long harga){
-        DecimalFormat pattern = new DecimalFormat("#.###");
-        return pattern.format(harga);
-    }
-
-
-}
Index: challenge1/src/main/java/org/example/challenge3/model/Product.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/model/Product.java b/challenge1/src/main/java/org/example/challenge3/model/Product.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/model/Product.java	
+++ /dev/null	
@@ -1,18 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.*;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@Builder
-public class Product {
-	private UUID id;
-	private String productName;
-	private Double price;
-	private UUID merchantId;
-
-}
Index: challenge2/src/main/java/org/example/challenge3/model/OrderDetail.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/model/OrderDetail.java b/challenge2/src/main/java/org/example/challenge3/model/OrderDetail.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/model/OrderDetail.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.*;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@Builder
-@ToString
-@EqualsAndHashCode
-public class OrderDetail {
-	private UUID id;
-	private UUID orderId;
-	private UUID productId;
-	private Integer quantity;
-	private Double totalPrice;
-
-
-}
Index: challenge1/src/main/java/org/example/challenge2/controller/ControllerPesanan.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/controller/ControllerPesanan.java b/challenge1/src/main/java/org/example/challenge2/controller/ControllerPesanan.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/controller/ControllerPesanan.java	
+++ /dev/null	
@@ -1,156 +0,0 @@
-package org.example.challenge2.controller;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.services.ServicePesanan;
-import org.example.challenge2.services.ServicePesananImpl;
-import org.example.challenge2.util.Utils;
-
-import java.io.BufferedWriter;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.util.InputMismatchException;
-import java.util.List;
-
-import static org.example.challenge2.view.View.*;
-
-public class ControllerPesanan {
-    ServicePesanan servicePesanan;
-    private  List<MenuMakanan> listMenuMakanan;
-    private  List<Pesanan> listPesanan;
-
-    private static int inputPilihan = 0 ;
-    private int total;
-    private long totalHarga;
-     private static boolean isExit = false;
-
-    public ControllerPesanan() {
-        this.servicePesanan = new ServicePesananImpl();
-        listMenuMakanan = servicePesanan.findAllMenus();
-        listPesanan = servicePesanan.findAllPesanan();
-    }
-    public void menuUtamaTampilan() {
-        while (!isExit) {
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("Selamat datang di BinarFud");
-            System.out.println(Utils.LINE_EQUALS);
-            System.out.println("\nSilahkan pilih makanan :");
-            menuMakananTampilan();
-            System.out.println("99. Pesan dan Bayar");
-            System.out.println("0. Keluar aplikasi");
-            System.out.print(Utils.INPUT_ARROW);
-            inputPilihan();
-        }
-    }
-
-    public void inputPilihan(){
-        try {
-            inputPilihan = Utils.scan.nextByte();
-            Utils.scan.nextLine();
-            switch (inputPilihan) {
-                case 1, 2, 3, 4, 5 -> konfirmasiPesananTampilan();
-                case 99 -> pembayaranTampilan();
-                case 0 -> {
-                    isExit = true;
-                    System.exit(0);
-                }
-                default ->{
-                    konfirmasiInputTidakDikenalTampilan();
-                }
-            }
-        } catch (InputMismatchException ignored){
-            konfirmasiInputTidakDikenalTampilan();
-        }
-    }
-
-    public void inputKonfirmasiPesanan(){
-        try {
-        int jumlah = Utils.scan.nextByte();
-        long harga = getHargaPesanan();
-        String namaPesanan = getNamaPesanan();
-        servicePesanan.savePesanan(new Pesanan(namaPesanan, jumlah, harga));
-        }catch (InputMismatchException ignored){
-            konfirmasiInputTidakDikenalTampilan();
-        }
-    }
-
-    public void inputKonfirmasiPembayaran() {
-        byte pilihan = Utils.scan.nextByte();
-        switch (pilihan) {
-            case 1 -> {
-                cetakInvoice();
-                System.out.println("Terimakasih telah berbelanja di Binar Fud! ");
-                System.exit(0);
-            }
-            case 2 -> System.out.println("Kembali ke menu Utama");
-            case 0 -> System.exit(0);
-            default -> konfirmasiInputTidakDikenalTampilan();
-        }
-    }
-
-    public void inputKonfirmasiUser() {
-            Utils.scan.nextLine();
-            String jawaban = Utils.scan.nextLine();
-            if (!jawaban.equalsIgnoreCase("y")) {
-                System.out.println("Goodbye!");
-                System.exit(0);
-            }
-    }
-
-    private void cetakInvoice (){
-            try (BufferedWriter writer = new BufferedWriter(new FileWriter("invoice_pembayaran.txt"))) {
-                writer.write(Utils.LINE_EQUALS);
-                writer.write("\nBinarFud\n");
-                writer.write(Utils.LINE_EQUALS);
-                writer.write("\nTerima kasih sudah memesan\ndi BinarFud");
-                writer.write("\n\nDibawah ini pesanan anda\n\n");
-                for (Pesanan objek : listPesanan) {
-                    writer.write(String.format("%-14s %5d %15s\n", objek.getNama(), objek.getJumlah(), rupiahKonversi(objek.getHarga())));
-                }
-                writer.write(Utils.LINE_DASH);
-                writer.write(String.format("%-14s %5d %15s\n\n", "total", total, rupiahKonversi(totalHarga)));
-                writer.write("Pembayaran : Binar Cash\n");
-                writer.write(Utils.LINE_EQUALS);
-                writer.write("\nSimpan struk ini sebagai\n");
-                writer.write("Bukti pembayaran\n");
-                writer.write(Utils.LINE_DASH);
-            } catch (IOException exception) {
-                exception.printStackTrace();
-            }
-        }
-
-        public List<MenuMakanan> getListMenuMakanan () {
-            return servicePesanan.findAllMenus();
-        }
-
-        public void setListMenuMakanan (List < MenuMakanan > listMenuMakanan) {
-            this.listMenuMakanan = listMenuMakanan;
-        }
-
-        public String getNamaPesanan () {
-            return listMenuMakanan.get(inputPilihan - 1).getNama();
-        }
-
-        public long getHargaPesanan () {
-            return listMenuMakanan.get(inputPilihan - 1).getHarga();
-        }
-
-
-        public int getTotal() {
-            return total;
-        }
-
-        public void setTotal(int total) {
-            this.total = total;
-        }
-
-        public long getTotalHarga() {
-            return totalHarga;
-        }
-
-        public void setTotalHarga(long totalHarga) {
-            this.totalHarga = totalHarga;
-        }
-}
-
-
Index: challenge3/src/main/java/org/example/challenge1/Main.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge1/Main.java b/challenge3/src/main/java/org/example/challenge1/Main.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge1/Main.java	
+++ /dev/null	
@@ -1,136 +0,0 @@
-package org.example.challenge1;
-
-import java.io.*;
-import java.text.DecimalFormat;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-
-
-
-public class Main {
-//    List untuk menuMakanan
-    static final String line1 = "================================================================";
-    static final String line2 = "---------------------------------------------------------------+\n";
-    static final String inputArrow = "\n=> ";
-    static final String formatPesanan = "%-14s %5d %15s\n";
-
-    static final Scanner scan = new Scanner(System.in);
-    static final List<MenuMakanan> menuMakanan = List.of(
-                new MenuMakanan(1,"Nasi Goreng", 15000),
-                new MenuMakanan(2,"Mie Goreng", 13000),
-                new MenuMakanan(3,"Nasi + Ayam", 18000),
-                new MenuMakanan(4,"Es Teh Manis", 3000),
-                new MenuMakanan(5,"Es Jeruk", 5000));
-    static List<Pesanan> menuPesanan = new ArrayList<>();
-
-    public static void main(String[] args) {
-
-    }
-
-    private static void menuUtamaTampilan() {
-//        Buat tampilan cli yang akan di ulang hingga selama user tidak memilih keluar dari aplikasi dan tidak menyelesaikan pembayaran
-//        karna switch 1 sd 5 adalah fitur memesan makanan, jadi saya buat satu scope
-//        ketika user memilih keluar dari aplikasi maka loop akan berhenti dan program akan keluar
-        while (true) {
-            System.out.println(line1);
-            System.out.println("Selamat datang di BinarFud");
-            System.out.println(line1);
-            System.out.println("\nSilahkan pilih makanan :");
-            for (MenuMakanan makanan : menuMakanan) {
-                System.out.printf("%d. %-20s | %s \n", makanan.id(), makanan.nama(), rupiahKonversi(makanan.harga()));
-            }
-            System.out.println("99. Pesan dan Bayar");
-            System.out.println("0. Keluar aplikasi");
-            System.out.print(inputArrow);
-            if (scan.hasNextByte()){
-                byte pilihan = scan.nextByte();
-                switch (pilihan) {
-                    case 1, 2, 3, 4, 5 -> konfirmasiPesananTampilan(pilihan);
-                    case 99 -> pembayaranTampilan();
-                    case 0 ->
-                            System.exit(0);
-                    default -> System.out.println("Tolong input dengan benar");
-                }
-            } else {
-                System.out.println("Tolong input dengan benar");            }
-        }
-    }
-
-    private static void pembayaranTampilan() {
-        System.out.println(line1);
-        System.out.println("Konfirmasi & Pembayaran");
-        System.out.println(line1);
-        int jumlahTotal = 0;
-        long jumlahHarga = 0;
-        for (Pesanan objek: menuPesanan) {
-            System.out.printf(formatPesanan, objek.nama(), objek.jumlah(), rupiahKonversi(objek.harga()));
-            jumlahTotal += objek.jumlah();
-            jumlahHarga += objek.harga();
-        }
-        System.out.println(line2);
-        System.out.printf(formatPesanan, "total", jumlahTotal, rupiahKonversi(jumlahHarga));
-        System.out.println("1. Konfirmasi dan Bayar");
-        System.out.println("2. Kembali ke Menu Utama");
-        System.out.println("0. Keluar Aplikasi");
-        System.out.print("\n=> ");
-        byte pilihan = new Scanner(System.in).nextByte();
-        switch (pilihan) {
-            case 1 -> cetakInvoice(jumlahTotal, jumlahHarga);
-            case 2 -> System.out.println("Kembali ke menu Utama");
-            case 0 -> System.exit(0);
-            default -> System.out.println("Tolong input dengan benar");
-        }
-    }
-
-
-    public static void cetakInvoice(int jumlahTotal, long jumlahHarga) {
-        try (BufferedWriter writer = new BufferedWriter(new FileWriter("invoice_pembayaran.txt"))) {
-            writer.write(line1);
-            writer.write("\nBinarFud\n");
-            writer.write(line1);
-            writer.write("\nTerima kasih sudah memesan\ndi BinarFud");
-            writer.write("\n\nDibawah ini pesanan anda\n\n");
-            for (Pesanan objek : menuPesanan) {
-                writer.write(String.format("%-14s %5d %15s\n", objek.nama(), objek.jumlah(), rupiahKonversi(objek.harga())));
-            }
-            writer.write(line2);
-            writer.write(String.format("%-14s %5d %15s\n\n", "total", jumlahTotal, rupiahKonversi(jumlahHarga)));
-            writer.write("Pembayaran : Binar Cash\n");
-            writer.write(line1);
-            writer.write("\nSimpan struk ini sebagai\n");
-            writer.write("Bukti pembayaran\n");
-            writer.write(line1);
-        } catch (IOException exception) {
-            exception.printStackTrace();
-        }
-    }
-
-        public static void konfirmasiPesananTampilan(byte pilihan){
-            System.out.println(line1);
-            System.out.println("Berapa pesanan anda");
-            System.out.println(line1);
-            System.out.println(" " + menuMakanan.get(pilihan - 1).nama() + "  |  " + menuMakanan.get(pilihan - 1));
-            System.out.println("Input 0 untuk kembali");
-            System.out.print("\nqty => ");
-            String nama = menuMakanan.get(pilihan - 1).nama();
-            byte jumlah = new Scanner(System.in).nextByte();
-            long harga = menuMakanan.get(pilihan - 1).harga() * jumlah;
-            for (Pesanan pesanan1 : menuPesanan) {
-                if (pesanan1.nama().equalsIgnoreCase(nama)) {
-                    jumlah += pesanan1.jumlah();
-                    harga += pesanan1.harga();
-                    menuPesanan.remove(pesanan1);
-                    break;
-                }
-            }
-//        lalu data akan ditambahkan ulang, untuk mencegah duplikasi menu pada listPesanan
-            menuPesanan.add(new Pesanan(nama, jumlah, harga));
-        }
-
-
-    public static String rupiahKonversi(long harga){
-        DecimalFormat pattern = new DecimalFormat("#.###");
-        return pattern.format(harga);
-    }
-}
\ No newline at end of file
Index: challenge2/src/main/java/org/example/challenge3/view/BinarFudView.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/view/BinarFudView.java b/challenge2/src/main/java/org/example/challenge3/view/BinarFudView.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/view/BinarFudView.java	
+++ /dev/null	
@@ -1,181 +0,0 @@
-package org.example.challenge3.view;
-
-import javax.swing.*;
-import java.awt.*;
-import javax.swing.table.DefaultTableModel;
-import java.text.NumberFormat;
-import java.util.*;
-import java.util.List;
-
-import lombok.Getter;
-import org.example.challenge3.controller.ControllerOrder;
-import org.example.challenge3.controller.ControllerProduct;
-import org.example.challenge3.model.Product;
-import org.example.challenge3.service.ServiceProduct;
-import org.example.challenge3.service.ServiceProductImpl;
-
-@Getter
-public class BinarFudView {
-	private JFrame frame;
-	private JTable table;
-	private JMenuBar menuBar;
-	private JButton bayarButton;
-	private JButton batalButton;
-	private JButton totalPesanan;
-	private DefaultTableModel tableModel;
-	private Map<JButton, Product> menuItemToProduct;
-	private ServiceProduct serviceProduct;
-	private Product clickedProduct;
-	private ControllerOrder controllerOrder;
-	private ControllerProduct controllerProduct;
-
-
-	public BinarFudView() {
-		controllerOrder = new ControllerOrder(this);
-		controllerProduct = new ControllerProduct(this);
-		frame = new JFrame("BinarFud");
-		menuItemToProduct = new HashMap<>();
-		serviceProduct = new ServiceProductImpl();
-
-		// ... (rest of your code)
-
-		// Create a menu bar
-		menuBar = new JMenuBar();
-
-		JMenu fileMenu = new JMenu("File");
-
-		// Create a "File Menu Item" menu item
-		JMenuItem viewFileMenuItem = new JMenuItem("Ekspor to excel");
-		viewFileMenuItem.addActionListener(e -> {
-			// Add code to open and display the file
-			// You can create a new JFrame for the chart here
-		});
-
-		fileMenu.add(viewFileMenuItem);
-
-		// Create a "Chart" menu
-		JMenu chartMenu = new JMenu("Statistik");
-
-		// Create a "View Chart" menu item
-		JMenuItem viewChartMenuItem = new JMenuItem("Lihat Statistik");
-		viewChartMenuItem.addActionListener(e -> {
-			// Add code to open and display the chart
-			// You can create a new JFrame for the chart here
-		});
-
-		chartMenu.add(viewChartMenuItem);
-
-		// Create a "Management" menu
-		JMenu managementMenu = new JMenu("Manajemen");
-
-		// Create a "Manage Products" menu item
-		JMenuItem manageProductsMenuItem = new JMenuItem("Manajemen Makanan");
-		manageProductsMenuItem.addActionListener(e -> {
-			// Add code to open a management window for products
-			// You can create a new JFrame for product management here
-		});
-
-		managementMenu.add(manageProductsMenuItem);
-
-		// Add the "File", "Chart" and "Management" menus to the menu bar
-		menuBar.add(fileMenu);
-		menuBar.add(chartMenu);
-		menuBar.add(managementMenu);
-
-
-		// Create a table with column names
-		String[] columnNames = {"Nama", "Jumlah", "Harga"};
-		tableModel = new DefaultTableModel(columnNames, 0);
-		table = new JTable(tableModel);
-
-		// Create a JScrollPane to hold the table and set its preferred size
-		JScrollPane tableScrollPane = new JScrollPane(table);
-		tableScrollPane.setPreferredSize(new Dimension(300, 200)); // Adjust the dimensions as needed
-
-		// Create a panel for menu buttons
-		JPanel menuPanel = new JPanel(new GridLayout(0, 2));
-
-		// Simulate loading products from a service
-		List<Product> products = controllerProduct.getAllProducts();
-
-		// Create a JButton for each product and associate with products
-		for (Product product : products) {
-			JButton menuItemButton = new JButton(product.getProductName());
-			menuItemButton.setFont(new Font("Times New Roman", Font.BOLD, 14));
-			menuPanel.add(menuItemButton);
-			menuItemToProduct.put(menuItemButton, product);
-
-
-			menuItemButton.addActionListener(e -> {
-				// Retrieve the associated product for the clicked menu item
-				Product clickedProduct = menuItemToProduct.get(menuItemButton);
-				if (clickedProduct != null) {
-					// Show an input dialog to get the quantity
-					String qtyInput = JOptionPane.showInputDialog(frame, "Masukkan jumlah untuk " + product.getProductName() + ":", "Input Jumlah", JOptionPane.QUESTION_MESSAGE);
-					// If the user provides a valid quantity, add a row to the table
-					if (qtyInput != null && !qtyInput.isBlank()) {
-						try {
-							int quantity = Integer.parseInt(qtyInput);
-							String totalPriceIDR = controllerOrder.converterCurrencyRupiah(product.getPrice() * quantity);
-							Object[] row = {product.getProductName(), quantity, totalPriceIDR};
-							controllerOrder.addOrderDetail(product, quantity);
-							tableModel.addRow(row);
-						} catch (NumberFormatException ex) {
-							JOptionPane.showMessageDialog(frame, "Input tidak sah.", "Error", JOptionPane.ERROR_MESSAGE);
-						}
-					} else {
-						JOptionPane.showMessageDialog(frame, "Maaf! Pesanan Anda belum lengkap. Silakan masukkan jumlah yang valid.", "Pesanan Belum Selesai", JOptionPane.ERROR_MESSAGE);
-					}
-				}
-
-			});
-
-		}
-
-		// Create a button for payment
-		bayarButton = new JButton("BAYAR");
-		bayarButton.setForeground(Color.GREEN);
-		bayarButton.setFont(new Font("Times New Roman", Font.BOLD, 20));
-		bayarButton.addActionListener(e -> {
-			controllerOrder.order();
-		});
-
-
-		batalButton = new JButton("BATAL"); // Modify the text as needed
-		batalButton.setForeground(Color.RED);
-		batalButton.setFont(new Font("Times New Roman", Font.BOLD, 20));
-		batalButton.addActionListener(e -> {
-			int confirm = JOptionPane.showConfirmDialog(frame, "Kamu yakin ingin membatalkan semua pesanan?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
-			if (confirm == JOptionPane.YES_OPTION) {
-				// User confirmed, clear the order
-				controllerOrder.clearOrder();
-			}
-		});
-		totalPesanan = new JButton("Total: 0"); // Modify the text as needed
-		totalPesanan.setEnabled(false);
-		totalPesanan.setFont(new Font("Times New Roman", Font.BOLD, 20));
-
-		JPanel bayarAndTotalPanel = new JPanel(new GridLayout(1, 1));
-		bayarAndTotalPanel.add(bayarButton);
-		bayarAndTotalPanel.add(batalButton);
-		bayarAndTotalPanel.add(totalPesanan);
-
-
-		// Create a panel to hold the table and Bayar/Total buttons
-		JPanel tableAndButtonPanel = new JPanel(new BorderLayout());
-		tableAndButtonPanel.add(tableScrollPane, BorderLayout.CENTER);
-		tableAndButtonPanel.add(bayarAndTotalPanel, BorderLayout.SOUTH);
-
-		// Add components to the frame using BorderLayout
-		frame.add(menuPanel, BorderLayout.WEST);
-		frame.add(tableAndButtonPanel, BorderLayout.CENTER);
-
-		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		frame.setSize(1000, 600); // Adjust the frame size as needed
-		frame.setJMenuBar(menuBar);
-		frame.setVisible(true);
-	}
-
-
-
-}
Index: challenge3/src/main/java/org/example/challenge2/services/ServicePesanan.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/services/ServicePesanan.java b/challenge3/src/main/java/org/example/challenge2/services/ServicePesanan.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/services/ServicePesanan.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge2.services;
-
-import jakarta.validation.Valid;
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-
-import java.util.List;
-
-public interface ServicePesanan {
-
-    List<MenuMakanan> findAllMenus();
-
-    List<Pesanan> findAllPesanan();
-    void savePesanan(Pesanan pesanan);
-
-    void saveMenuMakanan(MenuMakanan menuMakanan);
-
-    void update(Pesanan pesanan);
-    void deleteByID(long id);
-}
Index: challenge2/src/main/java/org/example/challenge3/model/Order.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/model/Order.java b/challenge2/src/main/java/org/example/challenge3/model/Order.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/model/Order.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.*;
-
-import java.time.LocalDate;
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@Builder
-@ToString
-public class Order {
-	private UUID id;
-	private LocalDate orderTime;
-	private String destinationAdress;
-	private UUID userId;
-	private boolean isComplete;
-}
Index: challenge2/src/main/java/org/example/challenge3/controller/ControllerProduct.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/controller/ControllerProduct.java b/challenge2/src/main/java/org/example/challenge3/controller/ControllerProduct.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/controller/ControllerProduct.java	
+++ /dev/null	
@@ -1,25 +0,0 @@
-package org.example.challenge3.controller;
-
-import org.example.challenge3.model.Product;
-import org.example.challenge3.service.ServiceProduct;
-import org.example.challenge3.service.ServiceProductImpl;
-import org.example.challenge3.view.BinarFudView;
-
-import java.util.List;
-
-public class ControllerProduct {
-
-	BinarFudView binarFudView;
-	ServiceProduct serviceProduct;
-
-	public ControllerProduct(BinarFudView binarFudView) {
-		this.binarFudView = binarFudView;
-		this.serviceProduct = new ServiceProductImpl();
-	}
-
-	public List<Product> getAllProducts(){
-		return serviceProduct.findAll();
-	}
-
-
-}
Index: challenge1/src/main/java/org/example/challenge3/model/Merchant.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/model/Merchant.java b/challenge1/src/main/java/org/example/challenge3/model/Merchant.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/model/Merchant.java	
+++ /dev/null	
@@ -1,20 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-public class Merchant {
-	private UUID id;
-	private String merchantName;
-	private String merchantLocation;
-	private boolean isOpen;
-
-}
Index: challenge2/src/main/java/org/example/challenge3/service/ServiceProduct.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/service/ServiceProduct.java b/challenge2/src/main/java/org/example/challenge3/service/ServiceProduct.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/service/ServiceProduct.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Product;
-
-import java.util.List;
-
-public interface ServiceProduct {
-	public List<Product> findAll();
-	default void createProduct(Product product) {
-		// default method implementation
-	}
-	default void deleteProduct(long id) {
-		// default method implementation
-	}
-}
Index: challenge1/src/main/java/org/example/challenge3/model/OrderDetail.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/model/OrderDetail.java b/challenge1/src/main/java/org/example/challenge3/model/OrderDetail.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/model/OrderDetail.java	
+++ /dev/null	
@@ -1,22 +0,0 @@
-package org.example.challenge3.model;
-
-import lombok.*;
-
-import java.util.UUID;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@Builder
-@ToString
-@EqualsAndHashCode
-public class OrderDetail {
-	private UUID id;
-	private UUID orderId;
-	private UUID productId;
-	private Integer quantity;
-	private Double totalPrice;
-
-
-}
Index: challenge2/src/main/java/org/example/challenge3/sql/InfoUser.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/sql/InfoUser.java b/challenge2/src/main/java/org/example/challenge3/sql/InfoUser.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/sql/InfoUser.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package org.example.challenge3.sql;
-
-import java.util.UUID;
-
-public class InfoUser {
-	public final static UUID USER_ID = UUID.fromString("0acd0373-f682-4482-b797-826c8dfcf90a");
-	public final static String NAME = "dhikap";
-	public final static String DESTINATION = "Jakarta";
-}
Index: challenge1/src/main/java/org/example/challenge2/services/ServicePesananImpl.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge2/services/ServicePesananImpl.java b/challenge1/src/main/java/org/example/challenge2/services/ServicePesananImpl.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge2/services/ServicePesananImpl.java	
+++ /dev/null	
@@ -1,50 +0,0 @@
-package org.example.challenge2.services;
-
-import org.example.challenge2.model.MenuMakanan;
-import org.example.challenge2.model.Pesanan;
-import org.example.challenge2.model.Databases;
-
-import java.util.List;
-
-public class ServicePesananImpl implements ServicePesanan {
-
-    @Override
-    public List<MenuMakanan> findAllMenus() {
-        return Databases.menuMakanan;
-    }
-
-    @Override
-    public List<Pesanan> findAllPesanan() {
-        return Databases.listPesanan;
-    }
-
-    @Override
-    public void savePesanan(Pesanan pesanan) {
-        pesanan.setHarga(pesanan.getHarga() * pesanan.getJumlah());
-        for (Pesanan object: Databases.listPesanan) {
-            if (object.getNama().equalsIgnoreCase(pesanan.getNama())){
-                pesanan.setJumlah(object.getJumlah() + pesanan.getJumlah());
-                pesanan.setHarga(object.getHarga() + pesanan.getHarga());
-                Databases.listPesanan.remove(object);
-                break;
-            }
-        }
-        Databases.listPesanan.add(pesanan);
-        System.out.println(Databases.listPesanan);
-    }
-
-    @Override
-    public void saveMenuMakanan(MenuMakanan menuMakanan) {
-
-    }
-
-    @Override
-    public void update(Pesanan pesanan) {
-
-    }
-
-    @Override
-    public void deleteByID(long id) {
-
-    }
-}
Index: challenge2/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java
===================================================================
diff --git a/challenge2/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java b/challenge2/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java
deleted file mode 100644
--- a/challenge2/src/main/java/org/example/challenge3/service/ServiceOrderImpl.java	
+++ /dev/null	
@@ -1,137 +0,0 @@
-package org.example.challenge3.service;
-
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.OrderDetail;
-import org.example.challenge3.sql.ConnectionManager;
-
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.List;
-import java.util.UUID;
-
-public class ServiceOrderImpl implements ServiceOrder {
-
-	@Override
-	public void createOrder(Order order) {
-		String query = "INSERT INTO public.orders(\n" +
-				"\tid, order_time, destination_address, user_id, is_complete)\n" +
-				"\tVALUES (?, ?, ?, ?, ?);";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-
-			preparedStatement.setObject(1, order.getId());
-			preparedStatement.setObject(2, order.getOrderTime());
-			preparedStatement.setString(3, order.getDestinationAdress());
-			preparedStatement.setObject(4, order.getUserId());
-			preparedStatement.setBoolean(5, order.isComplete());
-			preparedStatement.executeUpdate();
-			System.out.println("Order inserted successfully.");
-
-
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to create order in the database.", e);
-		}
-	}
-
-	public void createOrderDetail(OrderDetail orderDetail) {
-		String query = "INSERT INTO public.order_details(\n" +
-				"\tid, order_id, product_id, quantity, total_price)\n" +
-				"\tVALUES (?, ?, ?, ?, ?);";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-
-			preparedStatement.setObject(1, orderDetail.getId());
-			preparedStatement.setObject(2, orderDetail.getOrderId());
-			preparedStatement.setObject(3, orderDetail.getProductId());
-			preparedStatement.setInt(4, orderDetail.getQuantity());
-			preparedStatement.setDouble(5, orderDetail.getTotalPrice());
-
-
-			preparedStatement.executeUpdate();
-			System.out.println("Order detail inserted successfully.");
-
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to create order detail in the database.", e);
-		}
-	}
-
-	@Override
-	public Double getTotalPriceOfOrder() {
-		String query = "SELECT SUM(total_price) AS total_price\n" +
-				"FROM public.order_details;";
-		Double totalPrice = null;
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query);
-		     ResultSet resultSet = preparedStatement.executeQuery()) {
-
-			if (resultSet.next()) {
-				totalPrice = resultSet.getDouble("total_price");
-			}
-
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to retrieve total order price from the database.", e);
-		}
-
-		return totalPrice;
-	}
-
-	@Override
-	public Order getOrderByUserId(UUID userId) {
-		String query = "SELECT * FROM orders WHERE user_id = ?";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-
-			preparedStatement.setObject(1, userId);
-			try (ResultSet resultSet = preparedStatement.executeQuery()) {
-				if (resultSet.next()) {
-					Order order = new Order();
-					order.setId((UUID) resultSet.getObject("id"));
-					order.setUserId((UUID) resultSet.getObject("user_id"));
-					order.setDestinationAdress(resultSet.getString("destination_address"));
-					order.setComplete(resultSet.getBoolean("is_complete"));
-					return order;
-				}
-				System.out.println("Order detail inserted successfully.");
-
-			} catch (SQLException e) {
-				throw new RuntimeException("Failed to create order detail in the database.", e);
-			}
-		} catch (SQLException e) {
-			throw new RuntimeException(e);
-		}
-		return null;
-	}
-
-	@Override
-	public OrderDetail getOrderDetailById(UUID orderDetailId) {
-		String query = "SELECT * FROM public.order_details WHERE id = ?";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-			preparedStatement.setObject(1, orderDetailId);
-
-			try (ResultSet resultSet = preparedStatement.executeQuery()) {
-				if (resultSet.next()) {
-					OrderDetail orderDetail = new OrderDetail();
-					orderDetail.setId((UUID) resultSet.getObject("id"));
-					orderDetail.setOrderId((UUID) resultSet.getObject("order_id"));
-					orderDetail.setProductId((UUID) resultSet.getObject("product_id"));
-					orderDetail.setQuantity(resultSet.getInt("quantity"));
-					orderDetail.setTotalPrice(resultSet.getDouble("total_price"));
-					return orderDetail;
-				}
-			}
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to retrieve order detail from the database.", e);
-		}
-		return null; // Return null if order detail is not found
-	}
-
-
-}
Index: challenge1/src/main/java/org/example/challenge3/sql/ConnectionManager.java
===================================================================
diff --git a/challenge1/src/main/java/org/example/challenge3/sql/ConnectionManager.java b/challenge1/src/main/java/org/example/challenge3/sql/ConnectionManager.java
deleted file mode 100644
--- a/challenge1/src/main/java/org/example/challenge3/sql/ConnectionManager.java	
+++ /dev/null	
@@ -1,99 +0,0 @@
-package org.example.challenge3.sql;
-
-import org.example.challenge3.model.Merchant;
-import org.example.challenge3.model.Order;
-import org.example.challenge3.model.Product;
-import org.example.challenge3.model.Users;
-
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-import java.util.UUID;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- *
- * @author Andhika Prameswara <prameswaara@gmail.com>
- */
-public class ConnectionManager {
-
-	private static final String USER = "postgres";
-	private static final String PASSWORD = "dikatampan";
-
-
-	public static Connection getConnection(String db) {
-		String driver = "org.postgresql.Driver";
-		Connection con = null;
-		try {
-			Class.forName(driver);
-			con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/" + db, USER, PASSWORD);
-			System.out.println("Database connection succed!");
-		} catch (ClassNotFoundException | SQLException e) {
-			Logger.getLogger(ConnectionManager.class.getName()).log(Level.WARNING, null, e);
-			System.out.println("Database connection failed!");
-		}
-		return con;
-	}
-
-	public static void main(String[] args) {
-//		createUser(new Users(UUID.randomUUID(), "dhikap", "prameswaara@gmail.com", "dikatampan"));
-//		createMerchant(new Merchant(UUID.randomUUID(), "AzelFood", "Jakarta", true));
-//		createProduct(new Product(UUID.randomUUID(), "Nasi Goreng",  15000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Mie Goreng", 13000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Nasi + Ayam", 18000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Es Teh Manis", 3000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-//		createProduct(new Product(UUID.randomUUID(), "Es Jeruk", 5000.0, UUID.fromString("ec8940a4-eb82-4c4f-82a3-cad199147349")));
-
-	}
-
-	private static void createProduct(Product product) {
-		String insertSql = "INSERT INTO products (id, product_name, price, merchant_id) VALUES (?, ?, ?, ?)";
-
-		try (Connection connection = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = connection.prepareStatement(insertSql)) {
-			preparedStatement.setObject(1, product.getId());
-			preparedStatement.setString(2, product.getProductName());
-			preparedStatement.setDouble(3, product.getPrice());
-			preparedStatement.setObject(4, product.getMerchantId());
-			preparedStatement.executeUpdate();
-			System.out.println("Product inserted successfully.");
-		} catch (SQLException e) {
-			throw new RuntimeException("Failed to insert product into the database.", e);
-		}
-	}
-
-	private static void createMerchant(Merchant merchant) throws SQLException {
-		String query = "INSERT INTO public.merchants(id, merchant_name, merchant_location, is_open) VALUES (?, ?, ?, ?);";
-
-		try (Connection conn = ConnectionManager.getConnection("binarfud"); PreparedStatement preparedStatement = conn.prepareStatement(query)) {
-			preparedStatement.setObject(1, merchant.getId());
-			preparedStatement.setString(2, merchant.getMerchantName());
-			preparedStatement.setString(3, merchant.getMerchantLocation());
-			preparedStatement.setBoolean(4, merchant.isOpen());
-			preparedStatement.executeUpdate();
-			System.out.println("Merchant created successfully.");
-		} catch (SQLException e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-
-	private static void createUser(Users users) throws SQLException {
-		String query = "INSERT INTO public.users(id, username, email_address, password) VALUES (?, ?, ?, ?)";
-		try (Connection conn = ConnectionManager.getConnection("binarfud");
-		     PreparedStatement preparedStatement = conn.prepareStatement(query)) {
-			preparedStatement.setObject(1, users.getId());
-			preparedStatement.setString(2, users.getUsername());
-			preparedStatement.setString(3, users.getEmailAdress());
-			preparedStatement.setString(4, users.getPassword());
-			preparedStatement.executeUpdate();
-			System.out.println("User created successfully.");
-		} catch (SQLException e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-
-}
Index: challenge3/src/main/java/org/example/challenge2/util/Utils.java
===================================================================
diff --git a/challenge3/src/main/java/org/example/challenge2/util/Utils.java b/challenge3/src/main/java/org/example/challenge2/util/Utils.java
deleted file mode 100644
--- a/challenge3/src/main/java/org/example/challenge2/util/Utils.java	
+++ /dev/null	
@@ -1,15 +0,0 @@
-package org.example.challenge2.util;
-
-import java.util.Scanner;
-
-public class Utils {
-    public static final String LINE_EQUALS = "================================================================";
-    public static final String LINE_DASH = "---------------------------------------------------------------+\n";
-    public static final String INPUT_ARROW = "\n=> ";
-    public static final String FORMAT_PESANAN = "%-14s %5d %15s\n";
-
-    public static Scanner scan = new Scanner(System.in);
-
-    public static boolean isExit = false;
-
-}
